# Student Research Clubs Network Portal - Guidelines

## Overview

- Purpose: Centralized platform for HUST research club activities, events, and resources
- Core Features: Dynamic homepage, news, schedules, resource sharing, Vietnamese support, CMS, member/club management

## Design

- Theme: Modern, minimalist design with bold visual storytelling
- Colors: Cardinal Red (#CE1628), Navy Blue (#003366), Sunflower Yellow (#F3C108), Charcoal Gray (#232020)
- Typography: Bold sans-serif for headings, clean sans-serif for body, emphasis on contrast and hierarchy
- Layout: Full-width sections, dynamic grid system, immersive imagery, data visualization cards, scroll-based content reveals

## Tech Stack

- Core: Next.js 14, TypeScript 5.x, React Server Components, Apollo Client, GraphQL
- Backend: WordPress (Headless CMS), WPGraphQL plugin
- Cloud: Vercel (frontend), WordPress hosting (backend), Cloudinary (images)
- Styling: Tailwind CSS 4.x, DaisyUI, lucide-react icons
- Security: Auth.js, WordPress authentication
- Visualization: D3.js v7

## Development Approach

- Progressive: Build in stages, pause after key components for review
- Scope: Implement only what's requested; clarify ambiguity with minimal viable solutions
- Communication: Summarize completed work, classify changes (Small/Medium/Large), outline plans for Large changes

## Architecture

- Patterns: GraphQL (data), Service (logic), Factory (objects), Observer (updates), Strategy (algorithms), Adapter (integration), Facade (simplicity)
- Principles: YAGNI (avoid unnecessary features), KISS (keep solutions simple)

## Feature Implementation

### Structure

```
src/features/[feature-name]/
├── components/     # Feature-specific components
├── hooks/         # Custom hooks for data fetching
├── graphql/       # GraphQL queries and mutations
├── types.ts       # TypeScript types/interfaces
└── index.ts       # Public API exports
```

### Guidelines

- Feature Independence: Each feature should be self-contained and reusable
- Data Flow: Use GraphQL for data fetching, Apollo Client for state management
- Component Organization:
  - Keep components under 200 lines
  - Split into smaller components when needed
  - Use composition over inheritance
- Type Safety:
  - Define interfaces in types.ts
  - Generate types from GraphQL schema
  - Use strict TypeScript checks
- State Management:
  - Use custom hooks for data fetching
  - Implement proper loading states
  - Handle errors gracefully
- Testing:
  - Unit test components
  - Test GraphQL queries
  - Mock WordPress responses
- Documentation:
  - Document public API in index.ts
  - Include usage examples
  - Document edge cases

### Integration

- Route Setup: Create corresponding route in src/app/
- Data Fetching: Use Apollo Client with proper caching
- Component Usage: Import from feature's public API
- Error Handling: Implement proper error boundaries
- Loading States: Use Suspense and loading.tsx
- SEO: Implement proper metadata

### Best Practices

- Follow Next.js App Router conventions
- Implement proper caching strategies
- Optimize performance with code splitting
- Ensure accessibility compliance
- Maintain consistent error handling
- Use proper TypeScript patterns
- Follow Vietnamese language support guidelines

## Business Logic

- CMS: WordPress handles all content management (clubs, users, events, resources, posts)
- Clubs: Create/update clubs and roles via WordPress admin interface
- Resources: Upload media through WordPress media library
- Events: Manage events with custom post type and ACF fields
- Access: WordPress roles and capabilities for content management

## Next.js Patterns

- Data Fetching: Use Apollo Client with Server/Client components
- Route Handlers: Map dynamic routes to WordPress slugs
- Caching: Apollo Client caching with Next.js ISR
- Components: Build with Server/Client component pattern
- State Management: Apollo Client cache and React Context
- Middleware: Handle auth and routing with Next.js middleware

## Complex Implementation Tactics

- Break Down Components: Split large features into smaller components (max 200 lines each)
- GraphQL Integration: Use fragments and type-safe queries
- Incremental Builds: Start with static data, add dynamic features later
- Facade Pattern: Use Apollo hooks to simplify data access
- Type Safety: Generate TypeScript types from GraphQL schema
- Mock Data: Test with WordPress staging environment
- Documentation: Document GraphQL queries and component usage
- Refactor Early: Keep code simple and maintainable

## Code Guidelines

- Use TypeScript with strict typing
- Follow Next.js app router conventions
- Keep components <200 lines
- Apply SOLID principles and DI
- Write self-documenting code with usage examples
- Separate business logic from UI
- Follow YAGNI and KISS to avoid over-engineering

## Styling

- Use Tailwind utilities with DaisyUI components
- Implement full-width hero sections with dynamic typography
- Design interactive data visualization cards
- Create scroll-based content reveals and transitions
- Maintain bold typography hierarchy with institutional colors
- Use full-width imagery and parallax effects
- Design mobile-first with responsive scaling
- Implement infographic elements for statistics
- Theme Lucide icons with institutional colors

## Security

- Sanitize and validate content with DOMPurify

## Data Fetching

- Use GraphQL fragments for reusable queries
- Implement cursor-based pagination
- Cache responses with Apollo Client
- Handle loading and error states

## Storage

- Store media in WordPress media library
- Use WordPress image sizes for optimization
- Cloudinary for enhanced image delivery
- Secure media access through WordPress

## UI Components

- Build with DaisyUI components
- Ensure accessibility (ARIA)
- Use WordPress Gutenberg blocks for rich content
- Implement loading states with Suspense

## Quality & Testing

- Unit test React components
- Test GraphQL queries and mutations
- Integration test WordPress interactions
- Verify authentication flows
- Document edge cases with examples

## Performance

- Optimize GraphQL queries
- Implement query batching
- Use React Suspense for loading states
- Configure proper WordPress caching

## Vietnamese Support

- Use WordPress multilingual support
- Vietnamese date/time formats
